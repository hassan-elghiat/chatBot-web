{
  "intents": [
    {
      "tag": "1",
      "patterns": [
        "Comment tu t'appelle?",
        "nom",
        "Dis-moi comment tu t'appelles ?",
        "Dites-moi comment vous vous appelez ?",
        "votre nom, s'il vous plaît ?",
        "Quel est votre nom ?",
        "Bonjour"
      ],
      "responses": ["Salut, bienvenue sur notre plateforme Learn By Bot, dans cette discussion vous pouvez tout demander sur l'algorithme."],
      "context_set": ""
    },
    {
      "tag": "2",
      "patterns": [
        "Algorithme",
        "C'est quoi un algorithme",
        "algorithmique",
        "ce quel algorithme ?",
        "Qu'est-ce qu'un algorithme ?",
        "définition d'algorithme"
      ],
      "responses": [
        "Un algorithme est une suite d'actions ou d'instructions qui doivent être exécutées dans un ordre bien déterminé pour résoudre un problème (ou réaliser un travail).",
        "Un algorithme est une suite finie et non ambiguë d'opérations ou d'instructions permettant de résoudre une classe de problèmes.",
        "Un algorithme est une méthode générale pour résoudre un type de problèmes. Il est dit correct lorsque, pour chaque instance du problème,il se termine en produisant la bonne sortie, c'est-à-dire qu'il résout le problème posé"
      ],
      "context_set": ""
    },
    {
      "tag": "3",
      "patterns": [
        "Notion de donnée ",
        "ce quoi une Notion de donnée ?",
        "Les données d'un Algorithmes ?",
        "les données"
      ],
      "responses": [
        "Les données sont des informations nécessaires au déroulement d'un algorithme.",
        "Les données sont des informations nécessaires au déroulement d'un algorithme. On distingue deux catégories : les constantes et les variables."
      ],
      "context_set": ""
    },
    {
      "tag": "4",
      "patterns": [
        "constante",
        "ce quoi une constant",
        "Constante ?",
        "Les constantes "
      ],
      "responses": [
        "Une constante est une donnée fixe qui ne varie pas durant l'exécution d'un algorithme. Une constante est caractérisée par son nom et sa valeur (fixe)Donnée qui conserve toujours la même valeur ",
        "Une constante est un objet dont l'état reste inchangé durant toute l'exécution d'un programme. On ne peut jamais modifier sa valeur et celle-ci doit donc être précisée lors de la définition de l'objet Syntaxe d'un Constante : Constante Nom _Constante = valeur ; Exemple : Constante Pi =3,14 ; Constante B = 6 ; Constante Mois ='Mars."
      ],
      "context_set": ""
    },
    {
      "tag": "5",
      "patterns": [
        "ce quoi une variable ?",
        "Variable",
        "définition d'une variable"
      ],
      "responses": [
        "Une variable est un objet dont le contenu peut être modifié par une action",
        "Une variable est un objet dont le contenu peut être modifié par une action durant l'exécution d'un algorithme."
      ],
      "context_set": ""
    },
    {
      "tag": "6",
      "patterns": [
        "représenter un algorithme",
        "Comment représenter un algorithme ?",
        "la structure d'un algorithme",
        "structure"
      ],
      "responses": [
        "On peut représenter un algorithme à l'aide d'un pseudo-code ou d'un organigramme. Un algorithme écrit en pseudo-code est composé de trois partiessuivantes : L'en-tête, la partie déclarative et le corps."
      ],
      "context_set": ""
    },
    {
      "tag": "7",
      "patterns": ["affectation", "affectation"],
      "responses": [
        "L'affectation est une opération qui consiste à attribuer une valeur à une variable. Elle est représentée par une flèche orientée à gauche --> "
      ],
      "context_set": ""
    },
    {
      "tag": "8",
      "patterns": ["affectation", "affectation"],
      "responses": [
        "L'affectation est une opération qui consiste à attribuer une valeur à une variable. Elle est représentée par une flèche orientée à gauche --> "
      ],
      "context_set": ""
    },
    {
      "tag": "9",
      "patterns": ["affectation", "affectation"],
      "responses": [
        "L'affectation est une opération qui consiste à attribuer une valeur à une variable. Elle est représentée par une flèche orientée à gauche --> "
      ],
      "context_set": ""
    },
    {
      "tag": "10",
      "patterns": ["Quelle sont les Types de base", "Variables"],
      "responses": [
        "Une variable de type booléen prend comme valeur VRAI ou FAUX. /n Une variable de type entier peut prendre comme valeur l'ensemble des nombres entiers signés. Les opérations associées sont les opérations usuelles +,-,*,/. /n Une variable de type réel peut prendre comme valeur l'ensemble des nombres réels. Les opérations associées sont les opérations usuelles +,-,*,/. /n Une variable de type car peut prendre comme valeur l'ensemble des caractères imprimables. On notera les valeurs entre guillemets. On considère souvent que les caractères sont ordonnés dans l'ordre alphabétique."
      ],
      "context_set": ""
    },
    {
      "tag": "11",
      "patterns": ["Structures de contrôle", "Si", "Sinon"],
      "responses": [
        "si ExpressionBooléenne alors /n BlocInstructions1 /n sinon /n BlocInstructions2 /n finsi /n"
      ],
      "context_set": ""
    },
    {
      "tag": "12",
      "patterns": ["Trie", "Algorithmes de tri", "Quelle sont les type d'algorithme de tri ?"],
      "responses": [
        "Il existe plusieurs algorithmes de tri : Tri par sélection (ou par extraction), Tri par insertion, Tri à bulles (ou par propagation), Tri rapide (ou Quick Sort), Tri fusion (ou Merge Sort), Tri par tas."
      ],
      "context_set": ""
    },
    {
      "tag": "13",
      "patterns": ["Algorithme Tri par selection","Tri par selection","Tri par extraction","extraction","selection","Algorithme selection","Tri selection"],
      "responses": [
        "VARIABLE /n t : tableau d'entiers /n i : nombre entier /n min : nombre entier /n j : nombre entier /n DEBUT /n i <- 1 /n tant que i<longueur(t):   //boucle 1 /n j <- i+1 /n min <- i /n tant que j<=longueur(t):   //boucle 2 /n si t[j]<t[min]: /n min <- j /n fin si /n j <- j+1 /n fin tant que /n si min≠i : /n échanger t[i] et t[min] /n fin si /n i <- i+1 /n fin tant que /n FIN"
      ],
      "context_set": ""
    },
    {
      "tag": "14",
      "patterns": ["Algorithme tri par insertion","Tri par insertion","insertion","Algorithme insertion","Tri insertion"],
      "responses": [
        "VARIABLE /n t : tableau d'entiers /n i : nombre entier /n j : nombre entier /n k : nombre entier /n DEBUT /n j <- 2 /n tant que j<=longueur(t):   //boucle 1 /n i <- j-1 /n k <- t[j] /n tant que i>0 et que t[i]>k:   //boucle 2 /n t[i+1] <- t[i] /n i <- i-1 /n fin tant que /n t[i+1] <- k /n j <- j+1 /n fin tant que /n FIN"
      ],
      "context_set": ""
    },
    {
      "tag": "15",
      "patterns": ["Algorithme Tri à bulles","Tri à bulles"," Tri propagation","propagation","bulles","Algorithme Tri à bulles","Tri bulles"],
      "responses": [
        "procedure tri_bulles(T) /n N  <-  taille de T /n pour i de N - 1 à 1 faire /n pour j de 0 à i - 1 faire /n si T[j] > T[j + 1] alors /n échanger T[j] et T[j + 1] /n fin si /n fin pour /n fin pour /n fin procedure"
      ],
      "context_set": ""
    }
  ]
}
